from main import *
import pytest


@pytest.mark.parametrize(
    "input_str, expected",
    [
        ("[[1],[2,3,4]]", [[1], [2, 3, 4]]),
        ("[[1,2,3],[4,5,6]]", [[1, 2, 3], [4, 5, 6]]),
        ("[1,1,3,1,1]", [1, 1, 3, 1, 1]),
        ("[1,[2,[3,[4,[5,6,7]]]],8,9]", [1, [2, [3, [4, [5, 6, 7]]]], 8, 9]),
    ],
)
def test_convert_string_to_list(input_str, expected):
    assert convert_string_to_list(input_str) == expected


@pytest.mark.parametrize(
    "left, right, expected",
    [
        ([1, 1, 3, 1, 1], [1, 1, 5, 1, 1], True),
        ([[1], [2, 3, 4]], [[1], 4], True),
        ([9], [[8, 7, 6]], False),
        ([[4, 4], 4, 4], [[4, 4], 4, 4, 4], True),
        ([7, 7, 7, 7], [7, 7, 7], False),
        ([], [3], True),
        ([[[]]], [[]], False),
        (
            [1, [2, [3, [4, [5, 6, 7]]]], 8, 9],
            [1, [2, [3, [4, [5, 6, 0]]]], 8, 9],
            False,
        ),
    ],
)
def test_compare_values(left, right, expected):
    assert compare_values(left, right) == expected


def test_parse_input_sequence_to_pairs():
    input_sequence = r"""[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]"""

    expected = [
        ("[1,1,3,1,1]", "[1,1,5,1,1]"),
        ("[[1],[2,3,4]]", "[[1],4]"),
        ("[9]", "[[8,7,6]]"),
        ("[[4,4],4,4]", "[[4,4],4,4,4]"),
        ("[7,7,7,7]", "[7,7,7]"),
        ("[]", "[3]"),
        ("[[[]]]", "[[]]"),
        ("[1,[2,[3,[4,[5,6,7]]]],8,9]", "[1,[2,[3,[4,[5,6,0]]]],8,9]"),
    ]

    assert parse_input_sequence_to_pairs(input_sequence) == expected


def test_parse_input_sequence_to_list():
    input_sequence = r"""[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]"""

    expected = [
        [1, 1, 3, 1, 1],
        [1, 1, 5, 1, 1],
        [[1], [2, 3, 4]],
        [[1], 4],
        [9],
        [[8, 7, 6]],
        [[4, 4], 4, 4],
        [[4, 4], 4, 4, 4],
        [7, 7, 7, 7],
        [7, 7, 7],
        [],
        [3],
        [[[]]],
        [[]],
        [1, [2, [3, [4, [5, 6, 7]]]], 8, 9],
        [1, [2, [3, [4, [5, 6, 0]]]], 8, 9],
    ]

    assert parse_input_sequence_to_list(input_sequence) == expected


def test_sum_indices_correct_order():
    input_sequence = r"""[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]"""

    assert sum_indices_correct_order(input_sequence) == 13


def test_sort_packets_with_dividers():
    input_sequence = r"""[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]"""

    actual = sort_packets_with_dividers(input_sequence)
    expected = [
        [],
        [[]],
        [[[]]],
        [1, 1, 3, 1, 1],
        [1, 1, 5, 1, 1],
        [[1], [2, 3, 4]],
        [1, [2, [3, [4, [5, 6, 0]]]], 8, 9],
        [1, [2, [3, [4, [5, 6, 7]]]], 8, 9],
        [[1], 4],
        [[2]],
        [3],
        [[4, 4], 4, 4],
        [[4, 4], 4, 4, 4],
        [[6]],
        [7, 7, 7],
        [7, 7, 7, 7],
        [[8, 7, 6]],
        [9],
    ]
    assert actual == expected

def test_decoder_key():
    input_sequence = r"""[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]"""

    actual = decoder_key(input_sequence)
    expected = 140

    assert actual == expected